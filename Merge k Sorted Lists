#问题描述
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
#这里要合并k个排序好的链表，本质还是两两合并，这里用到了分而治之的思想，帮k个链表先划分合并两个k/2个链表的任务，
然后不断的进行划分，直到划分为1个链表或者2个链表的任务。比如合并4个链表，首先划分为合并两个2个链表的任务，然后在划分为合并2个1个链表的任务。
0，1，2，3。合并0，3/1，2.最后在合并（0，3）和（1，2）
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if not lists:
            return None
        n = len(lists)
        while n>1:#一直划分到只剩一个链表
            k = (n+1)/2#如果列表的长度为奇数，比如0，1，2，3，4。就相当于（0，4），2, (1,3),这样合并，偶数不受影响。
            for i in range(0,n/2):
                lists[i] = self.merge(lists[i],lists[i+k])
            n = k
        return lists[0]
    def merge(self,list1, list2):#合并2个链表
        dummy = ListNode(-1)
        cur = dummy
        while list1 and list2:
            if list1.val < list2.val:
                cur.next = list1
                list1 = list1.next
            else:
                cur.next = list2
                list2 = list2.next
            cur = cur.next
        if list1:
            cur.next=list1
        if list2:
            cur.next=list2
        return dummy.next
        
