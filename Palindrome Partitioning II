Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Example:

Input: "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
'''这里首先需要用到dp[i][j]得到字串是否是回文，用到的就是最长子回文串的思路，然后我们在定义一个一维数组的dp[i]
代表第i个字符到第n-1个字符的最小切割次数，(i,n-1)有许多个切割点j,如果切隔点j为n-1，则代表(i,n-1)为一个回文串，不需要切割，
否则切割次数就为1+dp[j+1]'''
class Solution(object):
    def minCut(self, s):
        """
        :type s: str
        :rtype: int
        """
        tp1 = [299 for i in range(len(s))]
        dp = [[1 if i==j else 0 for j in range(len(s))]for i in range(len(s))]

        for i in range(len(s)):
            for j in range(i):
                dp[j][i]= (1 if s[i]==s[j] and (i-j-1<2 or dp[j+1][i-1]) else 0)
      
        for t in range(len(s)-1,-1,-1):
            tp1[t]=99999
            for k in range(t,len(s)):
                if dp[t][k]==1:
                    if k+1<len(s):
                        tp1[t] = min(tp1[t],1+tp1[k+1])
                    else:
                        tp1[t]=0
        return tp1[0]
